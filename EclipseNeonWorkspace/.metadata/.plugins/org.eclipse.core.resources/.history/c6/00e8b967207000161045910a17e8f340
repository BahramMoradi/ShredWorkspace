package com.netcompany.dataextractor;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Stream;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

public class FileParser {
	public Stream<String> ReadAllLines(String filePath) throws IOException{
		Stream<String> lines= Files.lines(Paths.get(filePath));
		return lines;

	}
	public void parseExcelCVSFile(String filePath) throws IOException{
		Reader in=new FileReader(filePath);
		Iterable<CSVRecord> records=CSVFormat.EXCEL.parse(in);
		records.forEach(record->{
			String value=record.get("Name of column");
		});
	}
	public void columnValueByIndex(String filePath) throws IOException{
		Reader in=new FileReader(filePath);
		Iterable<CSVRecord> records=CSVFormat.RFC4180.parse(in);
		records.forEach(record->{
			String columnOne=record.get(0);
			// do some ting with the value...
		});
		
	}
	/**
	 * Indices may not be the most intuitive way to access record values. For this reason it is possible 
	 * to assign names to each column in the file:
	 * @param filePath
	 * @throws IOException
	 */
	public void customHeader(String filePath) throws IOException{
		Reader in = new FileReader(filePath);
		Iterable<CSVRecord> records = CSVFormat.RFC4180.withHeader("ID", "CustomerNo", "Name").parse(in);
		
	}

}
